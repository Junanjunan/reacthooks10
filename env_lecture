# 0.3 Requirements

    react, node.js

    npm이 있어야 publish 할 수 있다.

    setState, setStateComponent, componentDidMount 등을 알아야 한다.


# 0.5 Workflow

    codesandbox에서 할것임

    codesandbox에서 react 앱을 만들고 Ctrl+S로 저장하면 sandbox가 fork 되어서 다른 url로 바뀐다는데 난 변화가 없음


# 1.0 Introduction to useState
    useState는 항상 2개의 value를 return 한다.
        첫번째는 내가 지정하는 값(item), 두번째는 첫번째 값을 변경하게 한다.(setItem)

            import {useState} from "react";
            const [item, setItem] = useState(initialState);
            ->  const [item, setItem] = useState(1);
            (강의에서 좀 불확실하게 언급) useState는 array를 return 해야 하는 것 같다

            만약 item하나만 사용하고 싶다면
                const item = useState(1)[0]; 이렇게 사용 하라 함
            또는 function을수정하고 싶으면
                const item = useState(1)[1]; 라고 하는데 무슨 의미인지...

    (index.js)
        import { StrictMode } from "react";
        import ReactDOM from "react-dom";

        import App from "./App";

        const rootElement = document.getElementById("root");
        ReactDOM.render(
        <StrictMode>
            <App />
        </StrictMode>,
        rootElement
        );

    (App.js)
        import "./styles.css";
        import { useState } from "react";

        export default function App() {
        const [item, setItem] = useState(1);
        const incrementItem = () => setItem(item + 1);
        const decrementItem = () => setItem(item - 1);
        return (
            <div className="App">
            <h1>Hello {item}</h1>
            <h2>Start editing to see some magic happen~!</h2>
            <button onClick={incrementItem}>increment</button>
            <button onClick={decrementItem}>decrement</button>
            </div>
        );
        }

    이렇게 하면 button을 클릭했을 때 값이 변하는 것을 만든다.
    이제 이것을 class component로 바꿔보자.
    hooks가 생기기 전에는 state를 함수형 component에 사용할 수 없었다. (class component보다 hooks가 편하다는 것을 보여주려고 하는 듯)
    state를 사용하기 위해서는 class component 형식을 사용했어야 한다.
    class component는 this와 같은 문장규칙과 render와 같은 사용방법을 알았어야 하는데 hooks는 이게 필요 없다.
    return에다가 뿌려주고 그 위에 정의(const 등)만 해주면 됨

    (App.js)
        import "./styles.css";
        import React, { useState } from "react";

        export default function App() {
        const [item, setItem] = useState(1);
        const incrementItem = () => setItem(item + 1);
        const decrementItem = () => setItem(item - 1);
        return (
            <div className="App">
            <h1>Hello {item}</h1>
            <h2>Start editing to see some magic happen~!</h2>
            <button onClick={incrementItem}>increment</button>
            <button onClick={decrementItem}>decrement</button>
            </div>
        );
        }                                                              // 여기까지는 useState 사용

        export class AppUgly extends React.Component {                 // 여기서부터는 class component 사용
        state = {
            item: 1
        };
        render() {
            const { item } = this.state;
            return (
            <div className="App">
                <h1>Hello {item}</h1>
                <h2>Start editing to see some magic happen~!</h2>
                <button onClick={this.incrementItem}>increment</button>
                <button onClick={this.decrementItem}>decrement</button>
            </div>
            );
        }
        incrementItem = () => {
            this.setState((state) => {
            return {
                item: state.item + 1
            };
            });
        };
        decrementItem = () => {
            this.setState((state) => {
            return {
                item: state.item - 1
            };
            });
        };
        }

    (index.js)
        import { StrictMode } from "react";
        import ReactDOM from "react-dom";

        import App, { AppUgly } from "./App";       // App은 함수형, AppUgly는 class component 이 두 차이 때문에 호출할 떄 {} 안붙고 붙고의 차이가 있는 듯

        const rootElement = document.getElementById("root");
        ReactDOM.render(
        <StrictMode>
            <App />
            <AppUgly />
        </StrictMode>,
        rootElement
        );


# 1.1 useInput

    (App.js)
        import React, { useState } from "react";

        const useInput = (initialValue) => {
        const [value, setValue] = useState(initialValue);
        return { value };                   // 기본 value를 return 해줘보도록 하자
        };

        export default function App() {
        const name = useInput("MR.");
        return (
            <div className="App">
            <h1>Hello</h1>
            <input placeholder="Name" value="name.value" />     // value="name.value"를 ...name으로 교체할 수 있는데, ...name은 name을 풀어서 안에 있는 것을 모두 표현하라는 의미
            </div>
        );
        }

    (App.js)
        export default function App() {
        const name = useInput("MR.");
        return (
            <div className="App">
            <h1>Hello</h1>
            <input placeholder="Name" {...name} />      // 이런 식으로
            </div>
        );
        }

    (App.js)
        const useInput = (initialValue) => {
        const [value, setValue] = useState(initialValue);
        const onChange = (event) => {
            console.log(event.target);
        };
        return { value, onChange };
        };

        export default function App() {
        const name = useInput("MR.");
        return (
            <div className="App">
            <h1>Hello</h1>
            <input placeholder="Name" {...name} />
            </div>
        );
        }

    위와같이 해주고 input에 타이핑을 하면, 타이핑마다 console.log 출력 됨
    이건 react에 있어 혁명적이다. 다른 function에서 이벤트를 처리할 수 있기 때문이다.
    이벤트를 분리된 파일, 다른 entity에 연결해서 처리할 수 있다.


# 1.2 useInput part Two
    (App.js)
        import "./styles.css";
        import React, { useState } from "react";

        const useInput = (initialValue, validator) => {         // 1. validator 추가 / 6. useIntput("Mr.", maxLen)
        const [value, setValue] = useState(initialValue);
        const onChange = (event) => {
            const {
            target: { value }
            } = event;
            let willUpdate = true;
            if (typeof validator === "function") {              // 2. validator가 function일때 value 값을 검증해서 willUpdate에 return  // 7. maxLen이 글자수가 10이하냐 초과냐에 따라 true, false 값을 반환하는 함수이기 때문에 if문 구동
            willUpdate = validator(value);
            }
            if (willUpdate) {                                   // 3. 2에서 받은  willUpdate 값이 true이면 value값을 받아서 setValue를 실행 (기본으로 let willUpdate = true이기 때문에 우선은 실행) // 글자수가 10이하인 경우 true 값이 willUpdate에 반영. 즉, 글자수가 10이하인 경우만 setValue를 통해 value값이 새로 배정 -> 글자값이 10이 넘어가면서부터 setValue가 작동하지 않아서 글자수는 10을 넘어가지 않는다.
            setValue(value);
            }
        };
        return { value, onChange };
        };

        export default function App() {
        const maxLen = (value) => value.length <= 10;           // 4. 글자수가 10 미만일때
        const name = useInput("MR.", maxLen);                   // 5. 초기값 "MR.", maxLen을 받은 useInput 값을 name에 return -> 6으로 간다.(1번)
        return (
            <div className="App">
            <h1>Hello</h1>
            <input placeholder="Name" {...name} />
            </div>
        );
        }

        // 또 다른 예로 const maxLen = (value) => !value.includes("@"); 라고하면, @가 입력이 되지 않는다.

            
# 1.3 useTabs

    (App.js)
        import "./styles.css";
        import React, { useState } from "react";

        const content = [
        {
            tab: "Section 1",
            content: "content Section 1"
        },
        {
            tab: "Section2",
            content: "content Section 2"
        }
        ];

        const useTabs = (initialTab, allTabs) => {
        if (!allTabs || !Array.isArray(allTabs)) {                      // Array.isArray() -> 종류가 어레이인지 아닌지 확인하는 함수
            return;
        }
        const [currentIndex, setCurrentIndex] = useState(initialTab);
        return {
            currentItem: allTabs[currentIndex],
            changeItem: setCurrentIndex
        };
        };

        export default function App() {
        const { currentItem, changeItem } = useTabs(0, content);        // 이 표현식이 익숙하지 않음...
        return (
            <div className="App">
            {content.map((section, index) => (
                <button onClick={() => changeItem(index)}>{section.tab}</button>
            ))}
            <div>{currentItem.content}</div>
            </div>
        );
        }


# 2.0 Introduction to useEffect
    
    useEffect는 componentWillUnmount, componentDidMount, componentWillUpdate 이다!! (세개를 합쳐 놓은 것?)

    useEffect
    useEffect(effect, deps?)    (? 안붙는 거는 필수적인것, ? 붙는거는 선택적인것인 듯)
    (alias) useEffect(effect: React.EffectCallback, deps?: React.DependencyList): void
    import useEffect
    Accepts a function that contains imperative, possibly effectful code.

    @param effect — Imperative function that can return a cleanup function

    @param deps — If present, effect will only activate if the values in the list change.

    @version — 16.8.0

    @see — https ://reactjs.org/docs/hooks-reference.html#useeffect

    (App.js)
        import "./styles.css";
        import React, { useEffect, useState } from "react";

        export default function App() {
        const sayHello = () => console.log("Hello");
        const [number, setNumber] = useState(0);
        const [aNumber, setAnumber] = useState(0);
        // useEffect(() => {
        //   sayHello();
        // });
        useEffect(sayHello, [number]); // 이렇게 하면 number가 변할때만(첫 버튼 클리시만) "Hello"가 출력, [number, aNumber]를 넣으면 각 버튼 모두 Hello 출력
                                       // effect 자리는 componentDidMount, deps 자리는 componentWillUpdate (라고 함..) -> component가 Mount 되었을 때 실행시키고 그 이후에 어떤 경우에도 실행시키고 싶지 않다면 빈 dependency를 전달하면 된다. [], 이때는 componentWillUpdate를 갖지 않게 되는 것이다.(?)
        return (
            <div className="App">
            <div>Hi</div>
            <button onClick={() => setNumber(number + 1)}>{number}</button>
            <button onClick={() => setAnumber(aNumber + 1)}>{aNumber}</button>
            </div>
        );
        }


# 2.1 useTitle

    (App.js)
        import "./styles.css";
        import React, { useEffect, useState } from "react";

        const useTitle = (initialTitle) => {
        const [title, setTitle] = useState(initialTitle);
        const updateTitle = () => {
            const htmlTitle = document.querySelector("title");
            htmlTitle.innerText = title;
        };
        useEffect(updateTitle, [title]);
        return setTitle;
        };

        export default function App() {
        const titleUpdater = useTitle("Loading...");
        setTimeout(() => titleUpdater("Home"), 3000);       // title을 보면 "Loading"이 3초 동안 나오고 그 후에 "Home"으로 바뀐다.
        return (
            <div className="App">
            <div>Hi</div>
            </div>
        );
        }


#. 2.2 useClick

    useRef에 대해서 먼저 설명
    useRef 는 getElementById와 유사, 찾으려는 곳에 ref를 걸고, 원하는 것 실행해준다
    (App.js)
        import "./styles.css";
        import React, { useEffect, useState, useRef } from "react";

        export default function App() {
        const potato = useRef();            / reference는 기본적으로 component의 어떤 부분을 선택할 수 있는 방법
        setTimeout(() => console.log(potato), 3000);
        return (
            <div className="App">
            <div>Hi</div>
            <input ref={potato} placeholder="la" />
            </div>
        );
        }

    위와 같이 하면, 3초 뒤에 아래와 같이 출력
        {current: HTMLInputElement}
        current: <input placeholder="la"></input>

    console.log(potato.current); 라고 하면
    <input placeholder="la"></input> 만 출력
    즉, current까지 입력을 해서, 원하는 지점을 딱 집어서 필요한 것 실행 가능

    (App.js)
        import "./styles.css";
        import React, { useEffect, useState, useRef } from "react";

        export default function App() {
        const potato = useRef(); // reference는 기본적으로 component의 어떤 부분을 선택할 수 있는 방법
        setTimeout(() => potato.current?.focus(), 5000);        
        return (
            <div className="App">
            <div>Hi</div>
            <input ref={potato} placeholder="la" />
            </div>
        );
        }

    강의에서는 potato.current.focus() 라고 했는데, 오류가 발생 mount되기 전에 실행되는 문제라고 함
        [Cannot read property 'focus' of undefined 오류 해결 방법 2가지]
        첫 번째 방법: potato.current.focus()를 -> potato.current?.focus()로 변경해주기

        두 번째 방법: useEffect를 이용해서 마운트가 끝난 후 focus해주기
        useEffect(() => {
        setTimeout(() => {
        potato.current.focus();
        }, 5000);
        });
                    

    (App.js)
        import "./styles.css";
        import React, { useEffect, useState, useRef } from "react";

        const useClick = (onClick) => {
        if (typeof onClick !== "function") {
            return;
        }
        const element = useRef();
        useEffect(() => {
            if (element.current) {
            element.current.addEventListener("click", onClick);
            }
            return () => {
            if (element.current) {
                element.current.removeEventListener("click", onClick);
            }
            };
        }, []); // dependency 없이. 따라서 무언가 update되었을때를 고려 안해도 된다.
        return element;
        };

        export default function App() {
        const sayHello = () => console.log("say hello");
        const title = useClick(sayHello);
        return (
            <div className="App">
            <h1 ref={title}>Hi</h1>
            </div>
        );
        }

        // useEffect에서 한가지 알아야 할 것, componentWillUnmount 될 때, addEventListener 지워야 한다.
        // useEffect는 componentDidmount 상태에 동작한다.
        // useEffect는 componentWillUnmount 때 발생하게 되는데, 이후에 여기서는 return() ={if(element.current){element.current.removeEventListener("click", onClick);}} 부분이 발동
        // 그래서 dependency가 존재하지 않는한 useEffect 안에 function을 넣으면 componentDidMount, componentDidUpdate 때 호출될것이다.
        // 만약 dependency가 존재한다면 addEventListener가 있는 function은 componentDidMount 일 때만 호출 될 것이다.
        // componentWillUnmount일 때는 return 한다.
        // 만약 function을 return 한다면 useEffect를 return 받은 그 함수는 componentWillUnMount때 호출될 것이다.
        // dependency를 넣지 않고 없애버린다면(빈 array 도 아예 안쓴다면) 매번 update 될 때마다 eventListener가 추가된다. 우린 이걸 원하지 않기 떄문에 [] 반드시 넣어준다.
        // 그래야 이건 componentDidMount 때 단 한번만 실행되라는 의미가 된다.
        // return에 removeEventListener 넣어준 것은 Component가 mount 되지 않았을 떄 eventListener가 배치되게 하고 싶지 않아서이다.


# 2.3 useConfirm & usePreventLeave
    